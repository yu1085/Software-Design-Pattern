package com.example.designPattern;

public class 说明 {


//    设计模式的本质是面向对象设计原则的实际运用，是对类的封装性、继承性和多态性以及类的关联关系和组合关系的充分理解。正确使用设计模式具有以下优点。
//        可以提高程序员的思维能力、编程能力和设计能力。
//        使程序设计更加标准化、代码编制更加工程化，使软件开发效率大大提高，从而缩短软件的开发周期。
//        使设计的代码可重用性高、可读性强、可靠性高、灵活性好、可维护性强。


//    创建型模式分为以下几种。
//    单例（Singleton）模式：某个类只能生成一个实例，该类提供了一个全局访问点供外部获取该实例，其拓展是有限多例模式。
//    原型（Prototype）模式：将一个对象作为原型，通过对其进行复制而克隆出多个和原型类似的新实例。
//    工厂方法（FactoryMethod）模式：定义一个用于创建产品的接口，由子类决定生产什么产品。
//    抽象工厂（AbstractFactory）模式：提供一个创建产品族的接口，其每个子类可以生产一系列相关的产品。
//    建造者（Builder）模式：将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们，最后构建成该复杂对象。
}
